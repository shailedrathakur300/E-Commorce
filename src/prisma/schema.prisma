// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Provider {
  Google
}

model User {
  id          String        @id @default(cuid())
  displayName String
  email       String        @unique
  orders      Order[]
  cart        ShoppingCart?
  reviews     Review[]

  @@map("users")
}

model Product {
  id          String      @id @default(cuid())
  name        String
  description String
  price       Float
  stock       Int
  categoryId  String
  category    Category    @relation(fields: [categoryId], references: [id])
  orderItems  OrderItem[]
  cartItems   CartItem[]
  reviews     Review[]

  @@map("products")
}

model Category {
  id       String    @id @default(cuid())
  name     String
  products Product[]

  @@map("categories")
}

model Order {
  id          String      @id @default(cuid())
  orderDate   DateTime    @default(now())
  userId      String
  user        User        @relation(fields: [userId], references: [id])
  totalAmount Float
  orderItems  OrderItem[]
  payment     Payment?
  shipment    Shipment?

  @@map("orders")
}

model OrderItem {
  id        String  @id @default(cuid())
  orderId   String
  order     Order   @relation(fields: [orderId], references: [id])
  productId String
  product   Product @relation(fields: [productId], references: [id])
  quantity  Int
  price     Float

  @@map("order_items")
}

model ShoppingCart {
  id        String     @id @default(cuid())
  userId    String     @unique
  user      User       @relation(fields: [userId], references: [id])
  cartItems CartItem[]

  @@map("shopping_carts")
}

model CartItem {
  id        String       @id @default(cuid())
  cartId    String
  cart      ShoppingCart @relation(fields: [cartId], references: [id])
  productId String
  product   Product      @relation(fields: [productId], references: [id])
  quantity  Int

  @@map("cart_items")
}

model Payment {
  id          String   @id @default(cuid())
  orderId     String   @unique
  order       Order    @relation(fields: [orderId], references: [id])
  paymentDate DateTime @default(now())
  amount      Float
  method      String

  @@map("payments")
}

model Review {
  id        String  @id @default(cuid())
  productId String
  product   Product @relation(fields: [productId], references: [id])
  userId    String
  user      User    @relation(fields: [userId], references: [id])
  rating    Int
  comment   String

  @@map("reviews")
}

model Shipment {
  id           String   @id @default(cuid())
  orderId      String   @unique
  order        Order    @relation(fields: [orderId], references: [id])
  shipmentDate DateTime @default(now())
  status       String

  @@map("shipments")
}
